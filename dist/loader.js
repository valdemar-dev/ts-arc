#!/usr/bin/env node
import*as _ from"fs";import*as d from"path";import*as f from"url";import{transformSync as O}from"esbuild";async function m(t,e,o){if(!(t.startsWith(".")||t.startsWith("/"))){const r=global.__tsArcConfig;if(r){const{baseUrl:n,paths:a,tsconfigDir:g}=r;for(const i of Object.keys(a)){let s=null;if(i.endsWith("/*")){const c=i.slice(0,-2);t.startsWith(c)&&(s=t.slice(c.length))}else t===i&&(s="");if(s!==null)for(const c of a[i]){const y=c.replace(/\*/g,s),l=n??g;if(l){const U=f.pathToFileURL(d.join(l,"dummy.ts")).href;try{return{...await m(`./${y}`,{parentURL:U},o),shortCircuit:!0}}catch(u){if(u.code!=="ERR_MODULE_NOT_FOUND")throw u}}}}if(n){const i=f.pathToFileURL(d.join(n,"dummy.ts")).href;try{return{...await m(`./${t}`,{parentURL:i},o),shortCircuit:!0}}catch(s){if(s.code!=="ERR_MODULE_NOT_FOUND")throw s}}}}try{return{...await o(t,e),shortCircuit:!0}}catch(r){if(r.code!=="ERR_MODULE_NOT_FOUND")throw r}try{return{...await o(t+".ts",e),shortCircuit:!0}}catch(r){if(r.code!=="ERR_MODULE_NOT_FOUND")throw r}try{return{...await o(t+".tsx",e),shortCircuit:!0}}catch(r){if(r.code!=="ERR_MODULE_NOT_FOUND")throw r}try{return{...await o(t+"/index.ts",e),shortCircuit:!0}}catch(r){if(r.code!=="ERR_MODULE_NOT_FOUND")throw r}try{return{...await o(t+"/index.tsx",e),shortCircuit:!0}}catch(r){throw r}}async function R(t,e,o){if(!t.endsWith(".ts")&&!t.endsWith(".tsx"))return o(t,e);const h=t.endsWith(".tsx")?"tsx":"ts",r=f.fileURLToPath(t),n=_.readFileSync(r,"utf8"),{code:a}=O(n,{loader:h,format:"esm",target:`node${process.versions.node}`,sourcemap:"inline",sourcefile:r});return{format:"module",source:a,shortCircuit:!0}}export{R as load,m as resolve};
