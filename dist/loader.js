#!/usr/bin/env node
import*as m from"fs";import*as l from"path";import*as f from"url";import{transformSync as g}from"esbuild";async function U(t,n,o){if(t.startsWith(".")||t.startsWith("/"))return o(t,n);const i=global.__tsArcConfig;if(i){const{baseUrl:r,paths:a}=i;for(const s of Object.keys(a)){let e=null;if(s.endsWith("/*")){const c=s.slice(0,-2);t.startsWith(c)&&(e=t.slice(c.length))}else t===s&&(e="");if(e!==null)for(const c of a[s]){const h=c.replace(/\*/g,e);if(r){const d=f.pathToFileURL(l.join(r,"dummy.ts")).href;try{return{...await o(`./${h}`,{parentURL:d}),shortCircuit:!0}}catch(u){if(u.code!=="ERR_MODULE_NOT_FOUND")throw u}}}}if(r){const s=f.pathToFileURL(l.join(r,"dummy.ts")).href;try{return{...await o(`./${t}`,{parentURL:s}),shortCircuit:!0}}catch(e){if(e.code!=="ERR_MODULE_NOT_FOUND")throw e}}}try{return await o(t,n)}catch(r){if(r.code!=="ERR_MODULE_NOT_FOUND")throw r}try{return{...await o(t+".ts",n),shortCircuit:!0}}catch(r){if(r.code!=="ERR_MODULE_NOT_FOUND")throw r}try{return{...await o(t+"/index.ts",n),shortCircuit:!0}}catch(r){throw r}}async function _(t,n,o){let i="ts";if(!t.endsWith(".ts"))if(t.endsWith(".tsx"))i="tsx";else return o(t,n);const r=f.fileURLToPath(t),a=m.readFileSync(r,"utf8"),{code:s}=g(a,{loader:i,format:"esm",target:`node${process.versions.node}`,sourcemap:"inline",sourcefile:r});return{format:"module",source:s,shortCircuit:!0}}export{_ as load,U as resolve};
