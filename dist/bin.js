#!/usr/bin/env node
import{register as b}from"node:module";import*as n from"node:path";import*as c from"node:url";import*as p from"node:fs";import{createRequire as j}from"node:module";const h=j(import.meta.url),C=c.fileURLToPath(import.meta.url),d=n.dirname(C),x=n.join(d,"loader.js");b(x,c.pathToFileURL(d).href);const l=process.argv[2];l||(console.error("Usage: node bin.js <script.ts> [args...]"),process.exit(1));const u=n.resolve(l),O=c.pathToFileURL(u).href;process.argv=[process.argv[0],l,...process.argv.slice(3)];function _(s){let t="",o=!1,e=0;for(;e<s.length;){const r=s[e];if(o){t+=r,r==='"'&&s[e-1]!=="\\"&&(o=!1),e++;continue}if(r==='"'){o=!0,t+=r,e++;continue}if(r==="/"&&s[e+1]==="/"){for(e+=2;e<s.length&&s[e]!==`
`;)e++;continue}if(r==="/"&&s[e+1]==="*"){for(e+=2;e<s.length&&!(s[e-1]==="*"&&s[e]==="/");)e++;e<s.length&&e++;continue}t+=r,e++}return t}function v(s){const t=p.readFileSync(s,"utf8"),o=_(t),e=JSON.parse(o);if(!e.extends)return e;const r=e.extends,U=n.dirname(s);let i;if(r.startsWith("./")||r.startsWith("../"))i=n.resolve(U,r),i.endsWith(".json")||(i+=".json");else try{i=h.resolve(r)}catch{i=h.resolve(r+"/tsconfig.json")}const g=v(i),m={...g,...e};return m.compilerOptions={...g.compilerOptions||{},...e.compilerOptions||{}},m}function P(s){let t=s;for(;t!==n.parse(t).root;){const o=n.join(t,"tsconfig.json");if(p.existsSync(o))return o;t=n.dirname(t)}return null}const a=P(n.dirname(u));let f={baseUrl:null,paths:{}};if(a){const t=v(a).compilerOptions||{},o=n.dirname(a),e=t.baseUrl;f.baseUrl=e?n.resolve(o,e):null,f.paths=t.paths||{}}global.__tsArcConfig=f,import(O).catch(s=>{console.error(s),process.exit(1)});
