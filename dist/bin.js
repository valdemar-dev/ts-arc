#!/usr/bin/env node
import{register as b}from"node:module";import*as o from"node:path";import*as l from"node:url";import*as p from"node:fs";import{createRequire as j}from"node:module";const h=j(import.meta.url),C=l.fileURLToPath(import.meta.url),d=o.dirname(C),x=o.join(d,"loader.js");b(x,l.pathToFileURL(d).href);const a=process.argv[2];a||(console.error("Usage: node bin.js <script.ts> [args...]"),process.exit(1));const u=o.resolve(a),O=l.pathToFileURL(u).href;process.argv=[process.argv[0],a,...process.argv.slice(3)];function _(t){let e="",n=!1,s=0;for(;s<t.length;){const r=t[s];if(n){e+=r,r==='"'&&t[s-1]!=="\\"&&(n=!1),s++;continue}if(r==='"'){n=!0,e+=r,s++;continue}if(r==="/"&&t[s+1]==="/"){for(s+=2;s<t.length&&t[s]!==`
`;)s++;continue}if(r==="/"&&t[s+1]==="*"){for(s+=2;s<t.length&&!(t[s-1]==="*"&&t[s]==="/");)s++;s<t.length&&s++;continue}e+=r,s++}return e}function v(t){const e=p.readFileSync(t,"utf8"),n=_(e),s=JSON.parse(n);if(!s.extends)return s;const r=s.extends,U=o.dirname(t);let i;if(r.startsWith("./")||r.startsWith("../"))i=o.resolve(U,r),i.endsWith(".json")||(i+=".json");else try{i=h.resolve(r)}catch{i=h.resolve(r+"/tsconfig.json")}const g=v(i),m={...g,...s};return m.compilerOptions={...g.compilerOptions||{},...s.compilerOptions||{}},m}function D(t){let e=t;for(;e!==o.parse(e).root;){const n=o.join(e,"tsconfig.json");if(p.existsSync(n))return n;e=o.dirname(e)}return null}const f=D(o.dirname(u));let c={baseUrl:null,paths:{},tsconfigDir:null};if(f){const e=v(f).compilerOptions||{},n=o.dirname(f),s=e.baseUrl;c.baseUrl=s?o.resolve(n,s):null,c.paths=e.paths||{},c.tsconfigDir=n}global.__tsArcConfig=c,import(O).catch(t=>{console.error(t),process.exit(1)});
