#!/usr/bin/env node
import{register as v}from"node:module";import*as o from"node:path";import*as l from"node:url";import*as p from"node:fs";import{createRequire as b}from"node:module";const h=b(import.meta.url),j=l.fileURLToPath(import.meta.url),x=o.dirname(j),C=o.join(x,"loader.js"),a=process.argv[2];a||(console.error("Usage: node bin.js <script.ts> [args...]"),process.exit(1));const d=o.resolve(a),O=l.pathToFileURL(d).href;process.argv=[process.argv[0],a,...process.argv.slice(3)];function D(s){let e="",n=!1,t=0;for(;t<s.length;){const r=s[t];if(n){e+=r,r==='"'&&s[t-1]!=="\\"&&(n=!1),t++;continue}if(r==='"'){n=!0,e+=r,t++;continue}if(r==="/"&&s[t+1]==="/"){for(t+=2;t<s.length&&s[t]!==`
`;)t++;continue}if(r==="/"&&s[t+1]==="*"){for(t+=2;t<s.length&&!(s[t-1]==="*"&&s[t]==="/");)t++;t<s.length&&t++;continue}e+=r,t++}return e}function u(s){const e=p.readFileSync(s,"utf8"),n=D(e),t=JSON.parse(n);if(!t.extends)return t;const r=t.extends,U=o.dirname(s);let i;if(r.startsWith("./")||r.startsWith("../"))i=o.resolve(U,r),i.endsWith(".json")||(i+=".json");else try{i=h.resolve(r)}catch{i=h.resolve(r+"/tsconfig.json")}const g=u(i),m={...g,...t};return m.compilerOptions={...g.compilerOptions||{},...t.compilerOptions||{}},m}function P(s){let e=s;for(;e!==o.parse(e).root;){const n=o.join(e,"tsconfig.json");if(p.existsSync(n))return n;e=o.dirname(e)}return null}const f=P(o.dirname(d));let c={baseUrl:null,paths:{},tsconfigDir:null};if(f){const e=u(f).compilerOptions||{},n=o.dirname(f),t=e.baseUrl;c.baseUrl=t?o.resolve(n,t):null,c.paths=e.paths||{},c.tsconfigDir=n}const R=l.pathToFileURL(C).href;v(R,{data:c}),import(O).catch(s=>{console.error(s),process.exit(1)});
