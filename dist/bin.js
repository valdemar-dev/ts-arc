#!/usr/bin/env node
import{register as v}from"node:module";import*as o from"node:path";import*as l from"node:url";import*as p from"node:fs";import{createRequire as b}from"node:module";const h=b(import.meta.url),j=l.fileURLToPath(import.meta.url),C=o.dirname(j),x=o.join(C,"loader.js"),a=process.argv[2];a||(console.error("Usage: node bin.js <script.ts> [args...]"),process.exit(1));const d=o.resolve(a),R=l.pathToFileURL(d).href;process.argv=[process.argv[0],a,...process.argv.slice(3)];function O(e){let t="",n=!1,s=0;for(;s<e.length;){const r=e[s];if(n){t+=r,r==='"'&&e[s-1]!=="\\"&&(n=!1),s++;continue}if(r==='"'){n=!0,t+=r,s++;continue}if(r==="/"&&e[s+1]==="/"){for(s+=2;s<e.length&&e[s]!==`
`;)s++;continue}if(r==="/"&&e[s+1]==="*"){for(s+=2;s<e.length&&!(e[s-1]==="*"&&e[s]==="/");)s++;s<e.length&&s++;continue}t+=r,s++}return t}function u(e){const t=p.readFileSync(e,"utf8"),n=O(t),s=JSON.parse(n);if(!s.extends)return s;const r=s.extends,U=o.dirname(e);let i;if(r.startsWith("./")||r.startsWith("../"))i=o.resolve(U,r),i.endsWith(".json")||(i+=".json");else try{i=h.resolve(r)}catch{i=h.resolve(r+"/tsconfig.json")}const g=u(i),m={...g,...s};return m.compilerOptions={...g.compilerOptions||{},...s.compilerOptions||{}},m}function S(e){let t=e;for(;t!==o.parse(t).root;){const n=o.join(t,"tsconfig.json");if(p.existsSync(n))return n;t=o.dirname(t)}return null}const f=S(o.dirname(d));let c={baseUrl:null,paths:{},tsconfigDir:null};if(f){const t=u(f).compilerOptions||{},n=o.dirname(f),s=t.baseUrl;c.baseUrl=s?o.resolve(n,s):null,c.paths=t.paths||{},c.tsconfigDir=n}const D=l.pathToFileURL(x).href;v(D,{data:c}),console.log("TS-ARC: Registered tsconfig as:",c),import(R).catch(e=>{console.error(e),process.exit(1)});
